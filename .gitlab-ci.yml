stages:
  - build
  - test
  - security-scan
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  REGISTRY: $CI_REGISTRY
  IMAGE_NAME: $CI_REGISTRY_IMAGE
  IMAGE_TAG: $CI_COMMIT_SHORT_SHA
  DOCKERFILE_PATH: "Dockerfile"
  CONTEXT_PATH: "."
  

build:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_BUILDKIT: 1
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "Building Docker image..."
    - docker build 
        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        --build-arg VCS_REF=$CI_COMMIT_SHA
        --build-arg VERSION=$CI_COMMIT_TAG
        -t $IMAGE_NAME:$IMAGE_TAG 
        -t $IMAGE_NAME:latest 
        -f $DOCKERFILE_PATH 
        $CONTEXT_PATH
    - echo "Pushing image to registry..."
    - docker push $IMAGE_NAME:$IMAGE_TAG
    - docker push $IMAGE_NAME:latest
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG


# test:
#   stage: test
#   image: node:18-alpine # Use a standard Node image, not your final prod image
#   script:
#     - echo "Installing dependencies for testing..."
#     - npm ci # Installs all dependencies, including dev
#     - echo "Running tests..."
#     - npm test
#   rules:
#     - if: $CI_COMMIT_BRANCH
#     - if: $CI_COMMIT_TAG
test:
  stage: test
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_BUILDKIT: 1
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "Running tests in container..."
    - | 
        docker run --rm 
        -v $(pwd):/app 
        -w /app 
        $IMAGE_NAME:$IMAGE_TAG 
        sh -c "
          if [ -f 'package.json' ]; then
            npm test
          elif [ -f 'requirements.txt' ]; then
            python -m pytest
          elif [ -f 'go.mod' ]; then
            go test ./...
          elif [ -f 'Cargo.toml' ]; then
            cargo test
          else
            echo 'No test framework detected, skipping tests'
          fi
        "
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG


trivy-scan-image:
  stage: security-scan
  image: aquasec/trivy:latest
  variables:
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    TRIVY_AUTH_URL: "$CI_REGISTRY"
  cache:
    paths:
      - .trivycache/
  script:
    - echo "Scanning image for vulnerabilities..."
    - trivy image --exit-code 1 --scanners vuln,secret,config \
        --severity HIGH,CRITICAL --ignore-unfixed \
        --format gitlab --output trivy-report.json $IMAGE_NAME:$IMAGE_TAG
  artifacts:
    reports:
      container_scanning: trivy-report.json
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG


deploy-staging:
  stage: deploy
  image: bitnami/kubectl:latest
  variables:
    KUBE_NAMESPACE: staging
    DEPLOYMENT_NAME: $CI_PROJECT_NAME-staging
  before_script:
    - echo "Configuring kubectl..."
    - mkdir -p ~/.kube
    - echo "$KUBE_CONFIG" | base64 -d > ~/.kube/config
    - kubectl config use-context staging
  script:
    - echo "Deploying to staging environment..."
    - envsubst < k8s/deployment.yaml | kubectl apply -f -
    - envsubst < k8s/service.yaml | kubectl apply -f -
    - kubectl rollout status deployment/$DEPLOYMENT_NAME -n $KUBE_NAMESPACE
    - echo "Deployment completed successfully"
  environment:
    name: staging
    url: https://$CI_PROJECT_NAME-staging.yourdomain.com
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual


deploy-production:
  stage: deploy
  image: bitnami/kubectl:latest
  variables:
    KUBE_NAMESPACE: production
    DEPLOYMENT_NAME: $CI_PROJECT_NAME-production
  before_script:
    - echo "Configuring kubectl..."
    - mkdir -p ~/.kube
    - echo "$KUBE_CONFIG" | base64 -d > ~/.kube/config
    - kubectl config use-context production
  script:
    - echo "Deploying to production environment..."
    - envsubst < k8s/deployment.yaml | kubectl apply -f -
    - envsubst < k8s/service.yaml | kubectl apply -f -
    - kubectl rollout status deployment/$DEPLOYMENT_NAME -n $KUBE_NAMESPACE
    - echo "Production deployment completed successfully"
  environment:
    name: production
    url: https://$CI_PROJECT_NAME.yourdomain.com
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
  needs:
    - build
    - test
    - trivy-scan